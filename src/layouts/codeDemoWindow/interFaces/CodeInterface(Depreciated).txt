
import {FileList} from "./CodeWindow"
import DynamicHeading from "../../layouts/dynamicHeading"
import React, { useLayoutEffect, useRef, useState } from "react"
import myBrowser from "../../browserHandling/myBrowser";
import { JsxElement } from "typescript";
import {ObjectRef} from '../../Interfaces/RefObjectInterface';
/* ------------------------------------------ Component Description ------------------------------------------
    Renders the code-interface used by the codeWindow component, mainly the id = Code_Container NODE.

    Passing paraemeters through props: 
        code : String of code elements 
------------------------------------------------------------------------------------------------------------*/

let textRescaled = false;
let RenderCodeInterface : React.FC < {file : FileList} > = (props) => {
    let CodeInterfaceContainer_Ref = useRef<HTMLDivElement>(null);
    let sideNumbering_Ref = useRef<HTMLDivElement>(null);
    let codeContent_Ref = useRef<HTMLDivElement>(null);
    let [lines, setLines] = useState<number>(1);                       /** (Ref : 2198) --> represent the # lines rendered based on file.content (line size) */
    let [globalFontSize, set_GlobalFontSize] =  useState<number>(25);  /** Global font size utilised at (Ref : 3321) */
     /** Dynamic-text container,text ref used to detemine smallest-font size at (Ref : 3391)  */
    let dynamicTextContainer_Ref = useRef<HTMLDivElement>(null);       
    let dynamicTextRef = useRef<HTMLParagraphElement>(null);          
    let dynamicTextWrapper : ObjectRef<HTMLParagraphElement> ={
        setFunc(ref, toRef) {
            dynamicTextRef = toRef;
        },
        ref : undefined
    }
    /** (Ref : 3321) --> Global styling property */
    let numberSideStyling : React.CSSProperties ={
        fontSize : `${globalFontSize}px`
    }

    /** Initialise necessary Action-listeners */
    useLayoutEffect(
        () => {
            if (CodeInterfaceContainer_Ref.current != null)
            {
                CodeInterfaceContainer_Ref.current.addEventListener("resize", () => {console.log("Change occurred!");});
            }
        }
    );

    /**  Dynamically re-scale and render necessary content. */
    useLayoutEffect(
        () => {
            /** (Ref : 3391) --> Determine the smallest font-size to be use globally by this component, that is
             *  by styling defined at (Ref : 3321). The smallest font-size is determined by the largest line-value
             *  in container : id = numberTab. This is the grestest numberic value defined at (Ref : 2198) determined at
             *  (Ref : 2197).   
             * */
            let get_RescaledSize = () => {
                if (dynamicTextRef.current != null)
                {
                    let smallestSize = myBrowser.RefHandling.getRefFontSize(dynamicTextRef);
                    return smallestSize;
                }
                return -1;
            }

            /** Re-scale font of all contents, that is x ∈ (codeContentContainer, numberTab). This font-size is determined by (Ref : 3391), and is the
             *  smallest font-size(k) ≤ fontSize(x) for some k = x. 
            */
            let rescaleTextSize = () :boolean =>
            {
                let reScaledSize : number = get_RescaledSize();
                if (reScaledSize === -1) return false;
                // if (reScaledSize != globalFontSize) set_GlobalFontSize(reScaledSize);
                return true;
            }


            /** Return the current number of lines that is representative of the contents (#lines in container) in id = codeContentContainer , 
             *  where if on return = 1 ⇒ numberTab and codeContents are aligned, and not the # of-lines needed.*/
            let getNumberoflines = () : number => {
                if (sideNumbering_Ref.current != undefined && codeContent_Ref.current != undefined && dynamicTextContainer_Ref.current != undefined )
                {
                    let sideHeight =  myBrowser.RefHandling.getRefHeight(sideNumbering_Ref);
                    let codeContentHeight = myBrowser.RefHandling.getRefHeight(codeContent_Ref);
                    dynamicTextContainer_Ref.current.style.height = `${sideHeight / lines}px`; //(Ref : 3321)
                    let numberofLines = codeContentHeight / sideHeight;  // where 1 ⇒ aligned, and not the #of-lines. 

                    console.log ("sideHeight = " + sideHeight);
                    console.log ("codeContentHeight = " + codeContent_Ref.current.clientHeight);

                    // if (numberofLines > 1) 
                    //     if (sideHeight >= codeContentHeight )numberofLines = Math.round(numberofLines);
                    //     else numberofLines = Math.round(numberofLines);

                        //NOTE : Math.round used for smaller size scaling
                    // numberofLines=  Math.round(numberofLines);
                    return numberofLines;
                }
                return -1;
            }

            /** (Ref : 2197) --> Determine the number of lines needed to display props.content in id = codeContentContainer. 
             *  This 'lines' value is used to render the appropriate visual component at (Ref : 9212). This method provokes a
             *  re-render upon new line value. 
             */
            let InitialiseLineValue = () => {

                let numberOfLines = getNumberoflines(); 
                console.log("# of line = " + numberOfLines);
                if (numberOfLines === -1) return;   // cannot get # of lines, we return!

                //NOTE FOR NEXXT TIME -->  THIS DOES NOT WORK B.C on setLines(numberOfLines), we increase content height by filling in numberTab.


                if (numberOfLines < 1 || (textRescaled && (numberOfLines > 1)) ) // number tab > codeContentContainer (height) ⋁ some change has been made, we recheck!
                {
                    console.log("rescaling diff")
                    textRescaled = false;
                    // console.log("prevContentHeight = " + prevContentHeight);
                    // console.log("codeContentHeight = " + codeContentHeight);

                    if (lines === 1) {
                        // InitialiseLineValue();
                        return;
                    }
                    // set_GlobalFontSize(15);
                    // setLines(1);
                }else if (textRescaled === false && Math.round( numberOfLines) > 1) 
                {
                    // if (Math.round(numberOfLines ) > 2)numberOfLines = Math.ceil(numberOfLines);
                    // else  numberOfLines = Math.round(numberOfLines);
                    console.log("rescaling line")
                    numberOfLines = Math.ceil(numberOfLines);
                    // console.log("Rounded number = "+ numberOfLines);
                    if ( numberOfLines != lines ){
                        // setLines(numberOfLines);
                        return;
                    }
                    // InitialiseLineValue();
                } else {// ⇒ content is aligned, that is IFF numberofLines = 1. We re-scale text. 
                    console.log("rescaling text")
                    if (textRescaled === false) {
                        textRescaled = true;
                        return;
                    }
                }
            }

            InitialiseLineValue();
        }
    )
    
    /** (Ref : 9212) --> Render the contents at id = "numberTab" container, this is : to indicator line-by-line value. */
    let elemRef = useRef<HTMLDivElement>(null);
    let numberTab : JSX.Element[] = [];
    for (let i =1; i <= lines; i++) numberTab.push( <div ref = {elemRef} key={i} > {i} </div>)
    

    /** (Ref : 3391) --> Determine the smallest font-size to be use globally by this component, that is
     *  by styling defined at (Ref : 3321). The smallest font-size is determined by the largest line-value
     *  in container : id = numberTab. This is the largest numberic value defined at (Ref : 2198) determined at
     *  (Ref : 2197).  
     * 
     *  This is done so that all text (by global font-size) are the same, and hence Code-content and 
     *  numberTab are perfectly aligned. 
    */
    // useLayoutEffect(
    //     () => {
    //         if (dynamicTextRef.current != null)
    //         {
    //             let smallestSize = myBrowser.RefHandling.getRefFontSize(dynamicTextRef);
    //             console.log("dynamic text size = " + smallestSize);                
    //             console.log("globalFontSize size = " + globalFontSize);


    //             if (globalFontSize != smallestSize){
    //                 set_GlobalFontSize(smallestSize);
    //                 console.log("Global font-size set!");
    //             }else{
    //                 console.log("isnt the same");
    //             }
    //         }
    //     }
    // )

    return(
        <>
            <div ref = {CodeInterfaceContainer_Ref} style = {{width:'100%', height :'100%', padding :'2%', backgroundColor :'red', boxSizing:'border-box'}}> 
                <div style = {{width :'100%', height :'100%', display :'grid', gridTemplateColumns:'10% 90%'}}> 
                    <div style = {{backgroundColor:'orange', textAlign :'center', position :'relative'}}> 
                        <div ref ={dynamicTextContainer_Ref} style ={{visibility:'hidden', width:'100%', height :"established at --> (Ref : 3321)" ,backgroundColor :'rgba(255,255,255,0.5)', position:'absolute'}}> 
                            <DynamicHeading textRef={dynamicTextWrapper} Text={`${lines}`}/> 
                        </div>
                        <div id = "numberTab" ref = {sideNumbering_Ref} style = { Object.assign({whiteSpace :'nowrap',}, numberSideStyling)}>
                            { numberTab }
                        </div>

                    </div>
                    <div id = "codeContentContainer" style = {{backgroundColor:'pink'}}>
                        <div ref = {codeContent_Ref} style ={Object.assign( { overflow:'hidden', backgroundColor:'green'}, numberSideStyling)}>
                            {props.file.content}
                        </div>

                    </div>
                </div>
            </div>
        </>
    )
}


export default RenderCodeInterface;
